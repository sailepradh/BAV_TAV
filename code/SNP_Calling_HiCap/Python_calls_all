#!/usr/bin/env python

def main():

    #
    # Imports
    #

    import sys
    import time

    inputData = getComandlineInput()
    sampleCollectionId = inputData.sampleCollectionId
    infilesDictionary = {}

    dummieGvcfs = getdummies(submitt=True,silent=False)

    #
    # foreach single cell or genomic DNA sample
    #
    samples = []
    for line in open(inputData.samples):

        if line[0] == '#': continue
        submitFlag = bool(int(line.rstrip().split('\t')[3]))
        sampleid = line.rstrip().split('\t')[0]
        infilesDictionary[sampleid] = [ 'index', 'XXXXXX', line.rstrip().split('\t')[1] , line.rstrip().split('\t')[2]]
        # create a sample object
        sys.stderr.write('\n-------\nCreating sample object for sample '+sampleid+'.\n')
        sample = Sample(sampleid,inputData.resultsPath+'/'+sampleCollectionId+'/mapping',infilesDictionary)

        # create directories and analysis scripts for mapping each sample
        sys.stderr.write('Creating scripts for sample '+sampleid+'.\n')
        sample.createDirs()
        sample.makeScriptTrimming()
        sample.makeScriptMapping()
        sample.makeScriptPostMapping()
        sample.makeScriptReAlNreCal()
        sample.makeScriptpostReAlNreCal()
        sample.makeScriptQC()
        sample.makeScriptgvcf()

        # submit scripts
        if submitFlag:
            sys.stderr.write('Submitting scripts for sample '+sampleid+'.\n')
            sample.submitScripts()

        # append the sample object to samples list
        samples.append(sample)

    # create a sample collection from the samples list
    sys.stderr.write('\n---------------------\nCreating sampleCollection object for paitent donor pair '+sampleCollectionId+'.\n')
    sampleCollection = SampleCollection(samples,inputData.resultsPath+'/'+sampleCollectionId+'/variantCalling',sampleCollectionId)

    # create directories and analysis scripts for variant calling of the sample collection
    sys.stderr.write('Creating scripts for paitent donor pair '+sampleCollectionId+'.\n')
    sampleCollection.createDirs()
    sampleCollection.makeScript_vqsr_indels()
    sampleCollection.makeScript_vqsr_snps()
    sampleCollection.makeScript_GenotypeGVCFs()

    # submit var calling scripts
    if inputData.submitCollection:
        sys.stderr.write('Submitting scripts for paitent donor pair '+sampleCollectionId+'.\n')
        sampleCollection.submitScripts()
    sys.stderr.write('All done for paitent donor pair '+sampleCollectionId+'.\n\n')

def getdummies(submitt=False,silent=True):

    import os
    import sys

    inputData = getComandlineInput()

    if not inputData.dummieBams: return False

    dummieGvcfs = []
    sampleCollectionId= '1000_genomes_dummies'
    infilesDictionary = {}

    for line in open(inputData.dummieBams):

        if line[0] == '#': continue
        sampleid = line.rstrip().split('\t')[0]
        infilesDictionary[sampleid] = [ 'index', 'XXXXXX', 'r1mock' , 'r2mock']
        # create a sample object
        if not silent:sys.stderr.write('\n-------\nCreating sample object for 1000Genomes bam '+sampleid+'.\n')
        sample = Sample(sampleid,inputData.resultsPath+'/'+sampleCollectionId+'/mapping',infilesDictionary)

        # create directories and analysis scripts
        if not silent:sys.stderr.write('Creating scripts for 1000Genomes bam '+sampleid+'.\n')
        sample.createDirs()
        try:
            os.unlink(sample.recalbam)
            os.symlink(line.rstrip().split('\t')[1],sample.recalbam)
        except:
            os.symlink(line.rstrip().split('\t')[1],sample.recalbam)
        sample.makeScriptgvcf()
        dummieGvcfs.append(sample.gvcf)

        # submit scripts
        if not silent:sys.stderr.write('Submitting scripts for 1000Genomes bam '+sampleid+'.\n')
        if inputData.submittdummies and submitt: sample.submitDummie()

    return dummieGvcfs

def getComandlineInput():
    """ Function for fetching input data from the commandline """

    #
    # imports
    #

    import argparse
    import sys

    argparser = argparse.ArgumentParser(prog='', description='', epilog='', formatter_class=argparse.RawTextHelpFormatter)

    argparser.add_argument(
        '-s','--samples',
        dest='samples',
        metavar='<filename.tsv>',
        type=str,
        required=True,
        help='Tab delimited file with sample information.'
        )

    argparser.add_argument(
        '-p','--resultsPath',
        dest='resultsPath',
        metavar='<path>',
        type=str,
        required=False,
        default='results',
        help='Path to where all results should be stored (default ./results).'
        )

    argparser.add_argument(
        '-d','--1000G_bams',
        dest='dummieBams',
        metavar='<filename>',
        type=str,
        required=False,
        default=False,
        help='List of 1000G bam files to use for the recalibration and realignment steps.'
        )

    argparser.add_argument(
        '-id','--collectionId',
        dest='sampleCollectionId',
        metavar='STRING',
        type=str,
        required=True,
        help='Name for the sample collection.'
        )

    argparser.add_argument(
        '--submitDummies',
        dest='submittdummies',
        action='store_true',
        required=False,
        default=False,
        help='Flag for subbmitting scripts for gvcfs creation from 1000Genomes bam files.'
        )

    argparser.add_argument(
        '--fatCell',
        dest='fatcell',
        action='store_true',
        required=False,
        default=False,
        help='set this flag to tell the pipe you are running a fatcell analysis.'
        )

    argparser.add_argument(
        '--submitCollection',
        dest='submitCollection',
        action='store_true',
        required=False,
        default=False,
        help='Flag for subbmitting scripts for genotype gvcfs and vqsr.'
        )

    argparser.add_argument(
        '-A','--project',
        dest='project',
        metavar='<projectId>',
        type=str,
        required=False,
        default='b2011011',
        help='ProjectId (default b2011011).'
        )

    argparser.add_argument(
        '-x','--reference',
        dest='reference',
        metavar='<ref.fa location>',
        type=str,
        required=False,
        default='~/singleFatCellExomeAnalysis/references/GATKbundle/human_g1k_v37.fasta',
        help='reference location (default "~/singleFatCellExomeAnalysis/references/GATKbundle/human_g1k_v37.fasta").'
        )

    argparser.add_argument(
        '--GATK',
        dest='GATK',
        metavar='<path>',
        type=str,
        required=False,
        default='~/singleFatCellExomeAnalysis/bin/GenomeAnalysisTK-3.1-1/GenomeAnalysisTK.jar',
        help='GATK location (default ~/singleFatCellExomeAnalysis/bin/GenomeAnalysisTK-3.1-1/GenomeAnalysisTK.jar).'
        )

    argparser.add_argument(
        '--Picard',
        dest='picard',
        metavar='<path>',
        type=str,
        required=False,
        default='~/bin/picard-tools-1.114',
        help='Picard location (default ~/bin/picard-tools-1.114).'
        )

    argparser.add_argument(
        '--Bundle',
        dest='bundle',
        metavar='<path>',
        type=str,
        required=False,
        default='~/singleFatCellExomeAnalysis/references/GATKbundle/',
        help='GATKbundle location (default ~/singleFatCellExomeAnalysis/references/GATKbundle/ ).'
        )

    argparser.add_argument(
        '--email',
        dest='email',
        metavar='<path>',
        type=str,
        required=True,
        default='NA@NA.NA',
        help='email adress for notifications.'
        )


    argparser.add_argument(
        '--TrimGalore',
        dest='trimgalore',
        action='store_true',
        required=False,
        default=False,
        help='Flag for using trimgalore for trimming, remember to also set --GaloreLocation CURRENTLY NOT WORKING.'
        )

    argparser.add_argument(
        '--GaloreLocation',
        dest='galoreLocation',
        metavar='<path>',
        type=str,
        required=False,
        default='/proj/b2011006/private/benjamin/programs/',
        help='TrimGalore location (default /proj/b2011006/private/benjamin/programs/ ).'
        )


    inputData = argparser.parse_args(sys.argv[1:])

    if inputData.resultsPath[-1] != '/': inputData.resultsPath += '/'
    if inputData.bundle[-1] != '/': inputData.bundle += '/'
    if inputData.galoreLocation and inputData.galoreLocation[-1] != '/': inputData.galoreLocation += '/'
    if inputData.picard[-1] == '/': inputData.picard = inputData.picard[:-1]

    return inputData

class Sample(object):

    def __init__(self,sampleid,basepath,infilesDictionary):
        """ sets values for all paths and files etc """

        import sys
        import os
        inputData = getComandlineInput()

        self.analysisScripts = os.path.abspath(sys.argv[0]).split('startAnalysis')[0][:-1]
        self.refpath = os.path.abspath(sys.argv[0]).split('analysisScripts')[0]+'references'
        self.email = inputData.email
        self.sampleid = sampleid
        self.index = [infilesDictionary[self.sampleid][0]]
        self.indexseq = [infilesDictionary[self.sampleid][1]]
        self.r1files = [infilesDictionary[self.sampleid][2]]
        self.r2files = [infilesDictionary[self.sampleid][3]]
        self.basepath = os.path.abspath(basepath)
        self.path = os.path.abspath(basepath)+'/'+sampleid
        self.project = inputData.project
        self.jobids = []

        self.reference = inputData.reference
        self.gatkreference = inputData.reference

        self.sam =		self.path+'/'+self.sampleid+'.sam'
        self.bam =		self.path+'/'+self.sampleid+'.bam'
        self.sortedbam =	self.path+'/'+self.sampleid+'.sorted.bam'
        self.mdmetrix =	self.path+'/'+self.sampleid+'.MarkDupsMetrix'
        self.markedbam =	self.path+'/'+self.sampleid+'.marked.bam'
        self.rginfobam =	self.path+'/'+self.sampleid+'.rgInfoFixed.bam'
        self.realtargets =	self.path+'/'+self.sampleid+'.reAlignemntTargetIntervals.bed'
        self.realignedbam = self.path+'/'+self.sampleid+'.realigned.bam'
        self.bqsr =		self.path+'/'+self.sampleid+'.BQSR.grp'
        self.recalbam =	self.path+'/'+self.sampleid+'.recalibrated.final.bam'
        self.gvcf =		self.path+'/'+self.sampleid+'.gvcf'

        self.scriptpath            = self.path+'/script'
        self.realncalscript        = self.scriptpath +'/'+self.sampleid+'.realNrecal.sh'
        self.postrealncalfixscript = self.scriptpath +'/'+self.sampleid+'.postRealNrecalFix.sh'
        self.mappingscript         = self.scriptpath +'/'+self.sampleid+'.mapping.sh'
        self.postmappingfixscript  = self.scriptpath +'/'+self.sampleid+'.postMappingFix.sh'
        self.qcscript              = self.scriptpath +'/'+self.sampleid+'.qc.sh'
        self.trimmingscript        = self.scriptpath +'/'+self.sampleid+'.trimming.sh'
        self.gvcfscript            = self.scriptpath +'/'+self.sampleid+'.gvcf.sh'

        self.gatk_location   = inputData.GATK
        self.picard_location = inputData.picard
        self.bundle_location = inputData.bundle

    def createDirs(self):
        import os
        try: os.makedirs(self.path)
        except OSError:pass
        try: os.makedirs(self.scriptpath)
        except OSError:pass

	def makeScriptTrimming(self):

    	inputData = getComandlineInput()
        #
        # sbatch header
        #
        output = ''
        output += '#! /bin/bash -l'+'\n'
        output += '#SBATCH -A '+self.project+'\n'
        output += '#SBATCH -n 2 -p core'+'\n'
        output += '#SBATCH -t 10:00:00'+'\n'
        output += '#SBATCH -J '+self.sampleid+'.trimming'+'\n'
        output += '#SBATCH -e '+self.path+'/stderr.trimming.txt'+'\n'
        output += '#SBATCH -o '+self.path+'/stdout.trimming.txt'+'\n'
        output += '#SBATCH --mail-type=All'+'\n'
        output += '#SBATCH --mail-user='+self.email+'\n'

        #
        # define variebles and go to path
        #
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'cd '+self.path+'\n'
        output += 'echo "-----"'+'\n'

        if inputData.trimgalore:
            output += 'module add bioinfo-tools FastQC cutadapt TrimGalore\n'
            output += 'nextera=CTGTCTCTTATACACATCT\n'
            output += 'trim_galore -a $nextera -a2 $nextera -q 25 --stringency 5 --paired --length 25 -o '+self.path+' '+self.r1files[0]+' '+self.r2files[0]+' &\n'
            output += 'wait\n'

            r1name = self.r1files[0].split('/')[-1]
            r2name = self.r2files[0].split('/')[-1]
            import re
            if re.search('.fastq',r1name): r1name = r1name.split('.fastq')[0]
            elif re.search('.fq',r1name): r1name = r1name.split('.fq')[0]
            if re.search('.fastq',r2name): r2name = r2name.split('.fastq')[0]
            elif re.search('.fq',r2name): r2name = r2name.split('.fq')[0]

            output += 'mv -v '+r1name+'_val_1.fq.gz r1.allTrimmed.fq.gz\n'
            output += 'mv -v '+r2name+'_val_2.fq.gz r2.allTrimmed.fq.gz\n'
        else:
            #output += 'workon py2.7'+'\n'
            output += 'module load bioinfo-tools python/2.7'+'\n'
            if inputData.fatcell:
                #
                # WGA adapter trimming
                #
                output += ''+self.analysisScripts+'/wgaAdapterTrimmer.py -i '+self.r1files[0]+' > r1.wgaTrimmed.fq 2> r1wgaTrimming.log.txt &\n'
                output += ''+self.analysisScripts+'/wgaAdapterTrimmer.py -i '+self.r2files[0]+' > r2.wgaTrimmed.fq 2> r2wgaTrimming.log.txt &\n'
                output += 'wait\n'

                #
                # illumina  adapter trimming
                #
                output += 'cutadapt -n 3  -a CTGTCTCTTATACACATCTGACGCTGCCGACGA -a CTGTCTCTTATACACATCTCCGAGCCCACGAGAC -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC -a AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT r1.wgaTrimmed.fq > r1.wgaAndilluminaTrimmed.fq  2> r1adapterTrimming.log.txt  &\n'
                output += 'cutadapt -n 3  -a CTGTCTCTTATACACATCTGACGCTGCCGACGA -a CTGTCTCTTATACACATCTCCGAGCCCACGAGAC -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC -a AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT r2.wgaTrimmed.fq > r2.wgaAndilluminaTrimmed.fq  2> r2adapterTrimming.log.txt &\n'
                output += 'wait\n'
            else:
                output += 'cutadapt -n 3  -a CTGTCTCTTATACACATCTGACGCTGCCGACGA -a CTGTCTCTTATACACATCTCCGAGCCCACGAGAC -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC -a AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT '+self.r1files[0]+' > r1.wgaAndilluminaTrimmed.fq  2> r1adapterTrimming.log.txt  &\n'
                output += 'cutadapt -n 3  -a CTGTCTCTTATACACATCTGACGCTGCCGACGA -a CTGTCTCTTATACACATCTCCGAGCCCACGAGAC -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC -a AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT '+self.r2files[0]+' > r2.wgaAndilluminaTrimmed.fq  2> r2adapterTrimming.log.txt &\n'
                output += 'wait\n'

            if inputData.fatcell:
                #
                # remove temp files
                #
                output += 'rm -v r1.wgaTrimmed.fq\n'
                output += 'rm -v r2.wgaTrimmed.fq\n'
                output += 'wait\n'

            #
            # quality trimmming
            #
            output += ''+self.analysisScripts+'/TrimBWAstyle.pl -q 20 r1.wgaAndilluminaTrimmed.fq > r1.wgaIlluminaAndQualityTrimmed.fq 2> r1qualityTrimming.log.txt &\n'
            output += ''+self.analysisScripts+'/TrimBWAstyle.pl -q 20 r2.wgaAndilluminaTrimmed.fq > r2.wgaIlluminaAndQualityTrimmed.fq 2> r2qualityTrimming.log.txt &\n'
            output += 'wait\n'

            #
            # remove temp files
            #
            output += 'rm -v r1.wgaAndilluminaTrimmed.fq\n'
            output += 'rm -v r2.wgaAndilluminaTrimmed.fq\n'
            output += 'wait\n'

            #
            # remove empty or "N" only sequences
            #
            output += 'python '+self.analysisScripts+'/removeEmptyReads.py r1.wgaIlluminaAndQualityTrimmed.fq r2.wgaIlluminaAndQualityTrimmed.fq r1.allTrimmed.fq r2.allTrimmed.fq singletts.fq >&2 2> removeEmptyReads.log.txt\n'

            #
            # remove temp files
            #
            output += 'rm -v r1.wgaIlluminaAndQualityTrimmed.fq\n'
            output += 'rm -v r2.wgaIlluminaAndQualityTrimmed.fq\n'
            output += 'wait\n'

        #
        # compress files
        #
        if not inputData.trimgalore: output += 'gzip -v9 r1.allTrimmed.fq &\n'
        if not inputData.trimgalore: output += 'gzip -v9 r2.allTrimmed.fq &\n'
        if not inputData.trimgalore: output += 'gzip -v9 singletts.fq &\n'
        output += 'wait\n'

        #
        # FASTQC
        #
        output += 'module load bioinfo-tools FastQC\n'
        output += 'fastqc r1.allTrimmed.fq.gz &\n'
        output += 'fastqc r2.allTrimmed.fq.gz &\n'
        if not inputData.trimgalore: output += 'fastqc singletts.fq.gz &\n'
        output += 'wait\n'
        output += 'mkdir fastqcResults\n'
        output += 'mv -v *.fq_fastqc* fastqcResults/\n'

        #
        # Final output and write script to file
        #
        output += 'echo'+'\n'
        output += 'wait'+'\n'
        output += 'echo "$(date) AllDone"'+'\n'
        output += 'echo "$(date) AllDone" >&2'+'\n'
        self.r1files[0] = self.path+'/r1.allTrimmed.fq.gz'
        self.r2files[0] = self.path+'/r2.allTrimmed.fq.gz'
        with open(self.trimmingscript,'w') as outfile: outfile.write(output)


 def makeScriptMapping(self):

        #
        # sbatch header
        #
        output = '#! /bin/bash -l'+'\n'
        output += '#SBATCH -A '+self.project+'\n'
        output += '#SBATCH -n 16 -p node'+'\n'
        output += '#SBATCH -t 24:00:00'+'\n'
        output += '#SBATCH -J '+self.sampleid+'.map.mark'+'\n'
        output += '#SBATCH -e '+self.path+'/stderr.mapNmark.txt'+'\n'
        output += '#SBATCH -o '+self.path+'/stdout.mapNmark.txt'+'\n'
        output += '#SBATCH --mail-type=All'+'\n'
        output += '#SBATCH --mail-user='+self.email+'\n'

        #
        # define variebles and go to path
        #
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'cd '+self.path+'\n'
        output += 'echo'+'\n'
        output += 'picard='+self.picard_location+'\n'
        output += 'module load bioinfo-tools bowtie2\n'
        #
        # BOWTIE mapping
        #output += 'module load bioinfo-tools bwa/0.7.8\n'
        output += 'bwa mem -t 16 '+self.reference+' '+self.r1files[0]+' '+self.r2files[0]+' > '+self.sam+'\n'
        #output += 'bwa mem -t 16 /sw/data/uppnex/reference/Homo_sapiens/GRCh37/program_files/bwa/concat.fa '+self.r1files[0]+' '+self.r2files[0]+' > '+self.sam+'\n'
        #output += 'bowtie2 -1 '+self.r1files[0]+' -2 '+self.r2files[0]+' --very-sensitive-local -p16 -x '+self.reference+' > '+self.sam+'\n'
        #output += 'bowtie2 -1 '+self.r1files[0]+' -2 '+self.r2files[0]+' -p16 -x '+self.reference+' > '+self.sam+'\n'
        output += 'echo -e "mapping Done. $(date) Running on: $(hostname)" 1>&2'+'\n'

        #
        # Final output and write script to file
        #
        output += 'wait'+'\n'
        output += 'echo "$(date) AllDone"'+'\n'
        output += 'echo "$(date) AllDone" >&2'+'\n'
        with open(self.mappingscript,'w') as outfile: outfile.write(output)

    def makeScriptPostMapping(self):

        #
        # sbatch header
        #
        output = '#! /bin/bash -l'+'\n'
        output += '#SBATCH -A '+self.project+'\n'
        output += '#SBATCH -n 4 -p core'+'\n'
        output += '#SBATCH -t 24:00:00'+'\n'
        output += '#SBATCH -J '+self.sampleid+'.postMap.mark'+'\n'
        output += '#SBATCH -e '+self.path+'/stderr.postMapNmark.txt'+'\n'
        output += '#SBATCH -o '+self.path+'/stdout.postMapNmark.txt'+'\n'
        output += '#SBATCH --mail-type=All'+'\n'
        output += '#SBATCH --mail-user='+self.email+'\n'

        #
        # define variebles and go to path
        #
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'cd '+self.path+'\n'
        output += 'echo'+'\n'
        output += 'picard='+self.picard_location+'\n'
        output += 'module load bioinfo-tools samtools java\n'
        #
        # Remove all non properpairs or reads with low quality or not primary alignment (also filters pcd duplicate though this will have no effect as they are not marked yet)
        #
        output += 'samtools view -bS -h -f 2 -F 1804 -q 20 '+self.sam+' > '+self.bam+' \n'
        output += 'rm -v '+self.sam+''+'\n'

        #
        # convert to bam file
        #
        #output += 'java -Xmx5g -jar $picard SamFormatConverter MAX_RECORDS_IN_RAM=2500000 INPUT='+self.sam+'.filtered OUTPUT='+self.bam+' 1>&2  2> '+self.path+'/stderr.sam2bamConversion.log.txt \n'
        #output += 'echo -e "sam2bam Done. $(date) Running on: $(hostname)" 1>&2'+'\n'
        #output += 'rm -v '+self.sam+'.filtered'+'\n'

        #
        # sort the bam file
        #
        output += 'java -Xmx5g -jar $picard SortSam MAX_RECORDS_IN_RAM=2500000 SORT_ORDER=coordinate INPUT='+self.bam+' '
        output+='OUTPUT='+self.sortedbam+' CREATE_INDEX=true 1>&2  2> '+self.path+'/stderr.sortBamFile.log.txt '+'\n'
        output += 'echo -e "bam2sort Done. $(date) Running on: $(hostname)" 1>&2'+'\n'
        output += 'rm -v '+self.bam+''+'\n'

        #
        # mark duplicates
        #
        output += 'java -Xmx5g -jar $picard MarkDuplicates MAX_RECORDS_IN_RAM=2500000 VALIDATION_STRINGENCY=LENIENT INPUT='+self.sortedbam+' OUTPUT='+self.markedbam+' METRICS_FILE='+self.mdmetrix+' 1>&2  2> '+self.path+'/stderr.markDuplicates.log.txt \n'
        output += 'echo -e "mark Done. $(date) Running on: $(hostname)" 1>&2'+'\n'
        output += 'rm -v '+self.sortedbam+''+'\n'

        #
        # samtools flagstat
        #
        output += 'samtools flagstat '+self.markedbam+' 1>&2 2> '+self.path+'/stderr.samtoolsFlagstat.log.txt \n'
        output += 'echo "flagstat Done. $(date) Running on: $(hostname)" 1>&2'+'\n'

        #
        # fix missing information
        #
        output += 'java -Xmx5g -jar $picard AddOrReplaceReadGroups '
        output += 'MAX_RECORDS_IN_RAM=2500000 '
        output += 'INPUT='+self.markedbam+' '
        output += 'OUTPUT='+self.rginfobam+' '
        output += 'CREATE_INDEX=true RGID='+self.sampleid+' RGLB='+self.sampleid+' RGPL=illumina RGSM='+self.sampleid+' RGCN="SciLifeLab" RGPU="barcode"'+'  1>&2  2> '+self.path+'/stderr.addAndReplaceReadGroups.log.txt \n'
        output += 'echo "addorreplace Done. $(date) Running on: $(hostname)" 1>&2'+'\n'
        output += 'rm -v '+self.markedbam+''+'\n'

        #
        # Final output and write script to file
        #
        output += 'wait'+'\n'
        output += 'echo "$(date) AllDone"'+'\n'
        output += 'echo "$(date) AllDone" >&2'+'\n'
        with open(self.postmappingfixscript,'w') as outfile: outfile.write(output)

    def makeScriptReAlNreCal(self):

        #
        # sbatch header
        #
        output = '#! /bin/bash -l\n'
        output += '#SBATCH -A '+self.project+'\n'
        output += '#SBATCH -n 16 -p node\n'
        output += '#SBATCH -t 72:00:00\n'
        output += '#SBATCH -J '+self.sampleid+'.realNrecal\n'
        output += '#SBATCH -e '+self.path+'/stderr.realNrecal.txt\n'
        output += '#SBATCH -o '+self.path+'/stdout.realNrecal.txt\n'
        output += '#SBATCH --mail-type=All\n'
        output += '#SBATCH --mail-user='+self.email+'\n'
        output += 'echo "$(date) Running on: $(hostname)"\n'

        #
        # define variebles and go to path
        #
        output += 'cd $workpath\n'
        output += 'picard='+self.picard_location+'\n'
        output += 'GATK='+self.gatk_location+'\n'
        output += 'GATKbundle='+self.bundle_location+'\n'
        output += 'echo "$(date) Running on: $(hostname)"\n'
        output += 'module load bioinfo-tools java\n'
        #
        # Find targets for indel realignment
        #
        output += 'echo -e "-> RealignerTargetCreator <-"\n'
        output += 'java -Xmx72g -jar $GATK -T RealignerTargetCreator -nt 16 -I '+self.rginfobam+' -R '+self.gatkreference+' -o '+self.realtargets
        output += ' -mismatch 0.0'
        output += ' -known $GATKbundle/Mills_and_1000G_gold_standard.indels.b37.vcf'
        output += ' -known $GATKbundle/dbsnp_138.b37.vcf'
        output += ' -known $GATKbundle/1000G_phase1.indels.b37.vcf  1>&2 2> '+self.path+'/stderr.RealignerTargetCreator.log.txt ;'
        output += '\n'

        with open(self.realncalscript,'w') as outfile: outfile.write(output)

    def makeScriptpostReAlNreCal(self):

	    #
	    # sbatch header
	    #
	    output = '#! /bin/bash -l\n'
	    output += '#SBATCH -A '+self.project+'\n'
	    output += '#SBATCH -n 1 -p core\n'
	    output += '#SBATCH -t 72:00:00\n'
	    output += '#SBATCH -J '+self.sampleid+'.PostRealNrecal\n'
	    output += '#SBATCH -e '+self.path+'/stderr.postRealNrecal.txt\n'
	    output += '#SBATCH -o '+self.path+'/stdout.postRealNrecal.txt\n'
	    output += '#SBATCH --mail-type=All\n'
	    output += '#SBATCH --mail-user='+self.email+'\n'
	    output += 'echo "$(date) Running on: $(hostname)"\n'

	    #
	    # define variebles and go to path
	    #
	    output += 'cd $workpath\n'
	    output += 'picard='+self.picard_location+'\n'
	    output += 'GATK='+self.gatk_location+'\n'
	    output += 'GATKbundle='+self.bundle_location+'\n'
	    output += 'echo "$(date) Running on: $(hostname)"\n'
            output += 'module load bioinfo-tools java\n'
	    #
	    # Realign reads around indels
	    #
	    output += 'echo -e "-> IndelRealigner <-"\n'
	    output += 'java -Xmx5g -jar $GATK -T IndelRealigner -I '+self.rginfobam+' -R '+self.gatkreference+' -targetIntervals '+self.realtargets
	    output += ' -o '+self.realignedbam
            output += ' -model USE_READS'
            output += ' -compress 5 1>&2 2> '+self.path+'/stderr.indelRealigner.txt ;'
	    output += '\n'
	    output += 'echo "Done. $(date) Running on: $(hostname)"\n'
	    output += 'echo "$(date) Running on: $(hostname)"\n'
	    output += 'rm -v '+self.rginfobam+''+'\n'

	    #
	    # Quality recalibration
	    #
	    output += 'echo -e "-> BaseRecalibrator <-"\n'
	    output += 'java -Xmx5g -jar $GATK -T BaseRecalibrator -I '+self.realignedbam+' -R '+self.gatkreference+' -o '+self.bqsr
	    output += ' -cov ReadGroupCovariate'
            output += ' -cov QualityScoreCovariate'
            output += ' -cov CycleCovariate'
            output += ' -cov ContextCovariate'
            output += ' -knownSites $GATKbundle/dbsnp_138.b37.vcf 1>&2 2> ' +self.path+'/stderr.baseRecalibrator.txt ;'
	    output += '\n'
	    output += 'echo -e "-> PrintReads <-"\n'
	    output += 'java -Xmx5g -jar $GATK -T PrintReads -baq CALCULATE_AS_NECESSARY -I '+self.realignedbam+' -R '+self.gatkreference+' -BQSR '+self.bqsr+' -o '+self.recalbam+' 1>&2 2> '+self.path+'/stderr.printreads.txt ;\n'
	    output += 'rm -v '+self.realignedbam+''+'\n'

	    #
	    # Final output and write script to file
	    #
	    output += 'echo "Done. $(date) Running on: $(hostname)"\n'
	    output += 'wait\n'
	    output += 'echo "$(date) AllDone"\n'
	    with open(self.postrealncalfixscript,'w') as outfile: outfile.write(output)

    def makeScriptQC(self):

        #
        # sbatch header
        #
        output = ''
        output += '#! /bin/bash -l'+'\n'
        output += '#SBATCH -A '+self.project+'\n'
        output += '#SBATCH -n 1 -p core'+'\n'
        output += '#SBATCH -t 60:00:00'+'\n'
        output += '#SBATCH -J '+self.sampleid+'.QC'+'\n'
        output += '#SBATCH -e '+self.path+'/stderr.QC.txt'+'\n'
        output += '#SBATCH -o '+self.path+'/stdout.QC.txt'+'\n'
        output += '#SBATCH --mail-type=All'+'\n'
        output += '#SBATCH --mail-user='+self.email+'\n'

        #
        # define variebles and go to path
        #
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'cd '+self.path+'\n'
        output += 'picard='+self.picard_location+'\n'
        output += 'GATK='+self.gatk_location+'\n'
        output += 'GATKbundle='+self.bundle_location+'\n'
        output += 'file='+self.recalbam+'\n'
        output += 'echo "-----"'+'\n'

        #
        # Load samtools
        #
        output += 'module load bioinfo-tools samtools java'+'\n'

        #
        # GATK callable Loci
        #
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'echo -e "-> CallableLoci <-"'+'\n'
        output += 'java -Xmx5g -jar $GATK -T CallableLoci -I $file -summary $file.summary.txt -o $file.callableLoci.bed -R '+self.gatkreference+' '+'\n'
        output += 'echo "Done. $(date) Running on: $(hostname)"'+'\n'
        output += 'echo'+'\n'
        output += 'echo "-----"'+'\n'

        #
        # Samtools flagstat
        #
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'echo -e "-> flagstat <-"'+'\n'
        output += 'samtools flagstat $file > $file.flagstat.txt '+'\n'
        output += 'echo "Done. $(date) Running on: $(hostname)"'+'\n'
        output += 'echo'+'\n'
        output += 'echo "-----"'+'\n'

        #
        # qacompute
        #
        #output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        #output += 'echo -e "-> Pauls qacompute <-"'+'\n'
        #output += '/proj/b2010052/scripts/qaCompute -d -q 10 -m $file $file.qacompute.out > $file.qacompute.stdout.txt 2> $file.qacompute.stderr.txt '+'\n'
        #output += 'echo "Done. $(date) Running on: $(hostname)"'+'\n'

        #
        # picard HS metrics
        #
        output += 'java -Xmx3g -jar $picard CalculateHsMetrics BAIT_INTERVALS=/proj/b2012058/nobackup/private/sailen/targetV1.2.list TARGET_INTERVALS=/proj/b2012058/nobackup/private/sailen/targetV1.2.list INPUT=$file OUTPUT=$file.hs_metrics.summary.txt PER_TARGET_COVERAGE=$file.hs_metrics.perTargetCoverage.txt REFERENCE_SEQUENCE='+self.reference+'  1>&2 2> '+self.path+'/stderr.caluclateHsmetrics.txt \n'

        #
        # Final output and write script to file
        #
        output += 'echo'+'\n'
        output += 'wait'+'\n'
        output += 'echo "$(date) AllDone"'+'\n'
        output += 'echo "$(date) AllDone" >&2'+'\n'
        with open(self.qcscript,'w') as outfile: outfile.write(output)

    def makeScriptgvcf(self):

        #
        # sbatch header
        #
        output = '#! /bin/bash -l\n'
        output += '#SBATCH -A '+self.project+'\n'
        output += '#SBATCH -n 1 -p core\n'
        output += '#SBATCH -t 72:00:00\n'
        output += '#SBATCH -J '+self.sampleid+'.gvcf\n'
        output += '#SBATCH -e '+self.path+'/stderr.gvcf.txt\n'
        output += '#SBATCH -o '+self.path+'/stdout.gvcf.txt\n'
        output += '#SBATCH --mail-type=All\n'
        output += '#SBATCH --mail-user='+self.email+'\n'
        output += 'echo "$(date) Running on: $(hostname)"\n'

        #
        # define variebles and go to path
        #
        output += 'cd $workpath\n'
        output += 'picard='+self.picard_location+'\n'
        output += 'GATK='+self.gatk_location+'\n'
        output += 'GATKbundle='+self.bundle_location+'\n'
        output += 'echo "$(date) Running on: $(hostname)"\n'

        output += 'module load bioinfo-tools java\n'
        output += 'echo "HC" '+'\n'

        output += 'java -Xmx5g -jar $GATK '
        output += ' -T HaplotypeCaller '
        output += ' -R '+self.reference+' '
        output += ' -I '+self.recalbam+' '
        output += ' -dcov 250'
        output += ' -stand_emit_conf 10 '
        output += ' -stand_call_conf 30 '
        output += ' -L /proj/b2012058/nobackup/private/sailen/targetV1.2.bed '
        output += ' -pairHMM LOGLESS_CACHING'
        output += ' -pcrModel CONSERVATIVE'
        output += ' --emitRefConfidence GVCF --variant_index_type LINEAR --variant_index_parameter 128000'
        output += ' -o '+self.gvcf+'  1>&2 2> '+self.path+'/stderr.haplotypeCaller.txt &'+'\n'
        output += 'wait'+'\n'

        #
        # Final output and write script to file
        #
        output += 'echo "Done. $(date) Running on: $(hostname)"\n'
        output += 'wait\n'
        output += 'echo "$(date) AllDone"\n'
        with open(self.gvcfscript,'w') as outfile: outfile.write(output)

    def submitScripts(self):

        import subprocess
        import sys

        sys.stderr.write('Placing scripts in jobqueue.\n')

     command = ['sbatch',self.trimmingscript]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        trimming_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued trimming of '+self.sampleid+' with JOBID '+trimming_jobid+'.\n')

        command = ['sbatch','--dependency=afterok:'+str(trimming_jobid),self.mappingscript]
    	#command = ['sbatch',self.mappingscript]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        mapping_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued mapping of sample '+self.sampleid+' with JOBID '+str(mapping_jobid)+'.\n')

        command = ['sbatch','--dependency=afterok:'+str(mapping_jobid),self.postmappingfixscript]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        postMap_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued post mapping fix of sample '+self.sampleid+' with JOBID '+str(postMap_jobid)+'.\n')

        command = ['sbatch','--dependency=afterok:'+str(postMap_jobid),self.realncalscript]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        recal_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued realignment and recalibration of sample '+self.sampleid+' with JOBID '+str(recal_jobid)+'.\n')

        command = ['sbatch','--dependency=afterok:'+str(recal_jobid),self.postrealncalfixscript]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        postRecal_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued realignment part 2 '+self.sampleid+' with JOBID '+str(postRecal_jobid)+'.\n')

        command = ['sbatch','--dependency=afterok:'+str(postRecal_jobid),self.qcscript]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        qc_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued qc analysis of '+self.sampleid+' with JOBID '+str(qc_jobid)+'.\n')

        command = ['sbatch','--dependency=afterok:'+str(postRecal_jobid),self.gvcfscript]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        gvcf_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued gvcf analysis of '+self.sampleid+' with JOBID '+str(gvcf_jobid)+'.\n')

        self.jobids = [str(gvcf_jobid)]#,str(mapping_jobid),str(recal_jobid),str(postMap_jobid),str(postRecal_jobid)]

    def submitDummie(self):

        import subprocess
        import sys

        sys.stderr.write('Placing scripts in jobqueue.\n')

        command = ['sbatch',self.gvcfscript]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        gvcf_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued gvcf analysis of '+self.sampleid+' with JOBID '+str(gvcf_jobid)+'.\n')

        self.jobids = [str(gvcf_jobid)]#,str(mapping_jobid),str(recal_jobid),str(postMap_jobid),str(postRecal_jobid)]

class SampleCollection(object):

    def __init__(self,samples,basepath,collectionId):
        import os
        import time
        import sys

        inputData = getComandlineInput()
        self.analysisScripts = os.path.abspath(sys.argv[0]).split('startAnalysis')[0][:-1]
        self.refpath = os.path.abspath(sys.argv[0]).split('analysisScripts')[0]+'references'
        self.email = inputData.email
        self.samples = samples
        self.collectionId = collectionId
        self.project = self.samples[0].project
        self.reference = self.samples[0].reference
        self.bamfiles = ' -I '.join([sample.recalbam for sample in self.samples])
        self.gvcffiles = ' --variant '.join([sample.gvcf for sample in self.samples])
        dummieGvcfs = getdummies()
        if dummieGvcfs: self.gvcffiles += ' --variant '+ ' --variant '.join([gvcf for gvcf in dummieGvcfs])
        self.jobidDependency = ''
        for sample in self.samples:
            if sample.jobids: self.jobidDependency += ':'+':'.join(sample.jobids)

        self.path = os.path.abspath(basepath)
        self.scriptpath = self.path+'/script'

        self.hc		= self.scriptpath +'/haplotypeCaller.sh'
        self.gvcf		= self.scriptpath +'/genotypeGVCFs.sh'
        self.vqsrindels	= self.scriptpath +'/vqsr.indels.sh'
        self.vqsrsnps	= self.scriptpath +'/vqsr.snps.sh'

        self.gatk_location = self.samples[0].gatk_location
        self.picard_location = self.samples[0].picard_location
        self.bundle_location = self.samples[0].bundle_location

    def createDirs(self):
        import os
        try: os.makedirs(self.path)
        except OSError:pass
        try: os.makedirs(self.scriptpath)
        except OSError:pass

    def makeScript_GenotypeGVCFs(self):
        output = '#!/bin/bash -l'+'\n'
        output += '#SBATCH -A '+self.project+'\n'
        output += '#SBATCH -n 8 -p node\n'
        output += '#SBATCH -t 10:00:00'+'\n'
        output += '#SBATCH -J '+self.collectionId+'.genotypeGVCFs'+'\n'
        output += '#SBATCH -e '+self.path+'/stderr.genotypeGVCFs.txt'+'\n'
        output += '#SBATCH -o '+self.path+'/stdout.genotypeGVCFs.txt'+'\n'
        output += '#SBATCH --mail-type=All'+'\n'
        output += '#SBATCH --mail-user='+self.email+'\n'
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'echo "$(date) Running on: $(hostname)" >&2'+'\n'
        output += 'cd '+self.path+'\n'
        output += 'picard='+self.picard_location+'\n'
        output += 'GATK='+self.gatk_location+'\n'
        output += 'GATKbundle='+self.bundle_location+'\n'
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'

        output += 'module load python/2.7'+'\n'
        output += 'python '+self.analysisScripts+'/mappingStatsForExcel.py '+self.samples[0].basepath+'/ '+'\n'
        output += 'echo "HC" '+'\n'

        output += 'java -Xmx100g -jar $GATK -nt 16 '
        output += '-T  GenotypeGVCFs '
        output += '-R '+self.reference+' '
        output += '--variant '+self.gvcffiles+' '
        output += '-L /proj/bils2015003/Nextera/targetV1.2.bed '
        output += '--dbsnp $GATKbundle/dbsnp_138.b37.vcf '
        output += '-A StrandBiasBySample -A FisherStrand -A MappingQualityZero -A MappingQualityZeroBySample -A QualByDepth '
        output += ' '

        output += '-o raw_variants.vcf  1>&2 2> '+self.path+'/stderr.GenotypeGVCFs_GATKrun.txt &'+'\n'

        output += 'wait'+'\n'
        output += 'echo "Done. $(date) Running on: $(hostname)"'+'\n'
        output += 'wait'+'\n'
        output += 'echo "$(date) AllDone"'+'\n'
        output += 'echo "$(date) AllDone" >&2'+'\n\n\n'
        with open(self.gvcf,'w') as outfile: outfile.write(output)

    def makeScript_vqsr_indels(self):
        output = '#! /bin/bash -l'+'\n'
        output += '#SBATCH -A '+self.project+'\n'
        output += '#SBATCH -n 8 -p node'+'\n'
        output += '#SBATCH -t 72:00:00'+'\n'
        output += '#SBATCH -J '+self.collectionId+'.VQSR.INDELs'+'\n'
        output += '#SBATCH -e '+self.path+'/stderr.vqsr.INDELs.txt'+'\n'
        output += '#SBATCH -o '+self.path+'/stdout.vqsr.INDELs.txt'+'\n'
        output += '#SBATCH --mail-type=All'+'\n'
        output += '#SBATCH --mail-user='+self.email+'\n'

        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'echo "$(date) Running on: $(hostname)" >&2'+'\n'

        output += 'cd '+self.path+'\n'
        output += 'workon py2.7'+'\n'
        output += 'reference='+self.reference+'\n'
        output += 'picard='+self.picard_location+'\n'
        output += 'GATK='+self.gatk_location+'\n'
        output += 'GATKbundle='+self.bundle_location+'\n'
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'

        output += 'echo "VQSR" '+'\n'
        output += 'java -Xmx24g -jar $GATK \\'+'\n'
        output += '   -T VariantRecalibrator \\'+'\n'
        output += '   -nt 16 \\'+'\n'
        output += '   -R $reference \\'+'\n'
        output += '   -input recalibrated_snps_raw_indels.vcf \\'+'\n'
        output += '   -recalFile indels.raw.recal \\'+'\n'
        output += '   -tranchesFile indels.raw.tranches \\'+'\n'
        output += '   -resource:mills,known=true,training=true,truth=true,prior=12.0 $GATKbundle/Mills_and_1000G_gold_standard.indels.b37.vcf \\'+'\n'
        output += '   -an DP -an FS -an MQRankSum -an ReadPosRankSum \\'+'\n'
        output += '   -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \\'+'\n'
        output += '   --maxGaussians 4 \\'+'\n'
        output += '   -rscriptFile recalibrate_INDEL_plots.R \\'+'\n'
        output += '   -mode INDEL'+'\n'
        output += 'echo "Done. $(date) Running on: $(hostname)"'+'\n'
        output += 'wait'+'\n'


        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'echo "---> apply recal <---"'+'\n'
        output += 'java -Xmx72g -jar $GATK \\'+'\n'
        output += '   -nt 16 \\'+'\n'
        output += '   -T ApplyRecalibration \\'+'\n'
        output += '   -R $reference \\'+'\n'
        output += '   -input recalibrated_snps_raw_indels.vcf \\'+'\n'
        output += '   -tranchesFile indels.raw.tranches \\'+'\n'
        output += '   -recalFile indels.raw.recal \\'+'\n'
        output += '   -o indels.recalibrated.vcf \\'+'\n'
        output += '   --ts_filter_level 99.0 \\'+'\n'
        output += '   -mode INDEL'+'\n'
        output += 'echo "Done. $(date) Running on: $(hostname)"'+'\n'
        output += 'wait'+'\n'

        output += 'echo $file;'+'\n'
        output += 'echo "$(date) AllDone"'+'\n'
        output += 'echo "$(date) AllDone" >&2'+'\n'

        with open(self.vqsrindels,'w') as outfile: outfile.write(output)

    def makeScript_vqsr_snps(self):
        inputData = getComandlineInput()
        output = '#! /bin/bash -l'+'\n'
        output += '#SBATCH -A '+self.project+'\n'
        output += '#SBATCH -n 8 -p node'+'\n'
        output += '#SBATCH -t 72:00:00'+'\n'
        output += '#SBATCH -J '+self.collectionId+'.VQSR.SNPs'+'\n'
        output += '#SBATCH -e '+self.path+'/stderr.vqsr.SNPs.txt'+'\n'
        output += '#SBATCH -o '+self.path+'/stdout.vqsr.SNPs.txt'+'\n'
        output += '#SBATCH --mail-type=All'+'\n'
        output += '#SBATCH --mail-user='+self.email+'\n'
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += 'echo "$(date) Running on: $(hostname)" >&2'+'\n'
        output += 'cd '+self.path+'\n'
        output += 'reference='+self.reference+'\n'
        output += 'picard='+self.picard_location+'\n'
        output += 'GATK='+self.gatk_location+'\n'
        output += 'GATKbundle='+self.bundle_location+'\n'
        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output += '\n'

        #
        # variant filtration
        #
        output += 'echo "---> Variant filtration <---" '+'\n'
        output += 'echo "---> Variant filtration <---" 1>&2'+'\n'
        output += 'java -Xmx60g -jar $GATK -T VariantFiltration '
        output += '-R $reference '
        output += '--filterExpression  "QUAL < 50.0" --filterName "LowQual" '
        #output += '--filterExpression "SB >=-1.0" --filterName "StrandBias" ' #deprecated annotation
        output += '--filterExpression "FS > 60" --filterName "FisherSB" '# for SNPs
        #output += '--filterExpression "FS > 200" --filterName "FIsherSB" '# for INDELs
        output += '--filterExpression "QD<1.0" --filterName "QualByDepth" '
        output += '--filterExpression "(MQ0 >= 4 && ((MQ0/(1.0 * DP)) > 0.1))" --filterName "FUBAR" '
        output += '--variant raw_variants.vcf '
        output += '--out filtered_variants.vcf '
        output += '\n'
        output += 'echo "Variant filtration done. $(date) Running on: $(hostname)"'+'\n'

        #
        # Variant quality score recalibration for SNPs
        #
        output += 'echo "---> VQSR <---" '+'\n'
        output += 'echo "---> VQSR <---" 1>&2'+'\n'
        output += 'java -Xmx60g -jar $GATK -T VariantRecalibrator '
        output += '-R $reference -input filtered_variants.vcf'
        output += ' -resource:hapmap,known=false,training=true,truth=true,prior=15.0'+' $GATKbundle/hapmap_3.3.b37.vcf'
        output += ' -resource:omni,known=false,training=true,truth=false,prior=12.0' +' $GATKbundle/1000G_omni2.5.b37.vcf'
        output += ' -resource:dbsnp,known=true,training=false,truth=false,prior=6.0' +' $GATKbundle/dbsnp_138.b37.vcf'
        output += ' -an QD -an MQRankSum -an ReadPosRankSum -an FS -an DP -mode SNP'
        output += ' -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0'
        output += ' -minNumBad 1000'
        output += ' -recalFile recalibrate_SNP.recal '
        output += ' -tranchesFile recalibrate_SNP.tranches '
        output += ' -rscriptFile recalibrate_SNP_plots.R '
        output += '\n'
        output += 'echo "Done. $(date) Running on: $(hostname)"'+'\n'
        output += 'wait'+'\n'
        output += 'echo "-----"'+'\n'
        output +='\n'


        output += 'echo "$(date) Running on: $(hostname)"'+'\n'
        output +='\n'
        output +='\n'
        output += 'echo "---> apply recal <---" '+'\n'
        output += 'echo "---> apply recal <---" 1>&2'+'\n'
        output +='\n'
        output += 'java -Xmx60g -jar $GATK '
        output += '-T ApplyRecalibration -R $reference '
        output += ' -input filtered_variants.vcf '
        output += ' -recalFile recalibrate_SNP.recal '
        output += ' -tranchesFile recalibrate_SNP.tranches '
        output += ' -o recalibrated_snps_raw_indels.vcf '
        output += ' --ts_filter_level 99.0 -mode SNP'+'\n'
        output +='\n'


        if inputData.fatcell:
            output += 'workon py2.7'+'\n'
            output +='python '+self.analysisScripts+'/filterVariants '+self.collectionId+'.Donor '+self.collectionId+'.Patient recalibrated_snps_raw_indels.vcf  >&2 2> '+self.path+'/stderr.filterVariantsMakeSummariesAndGraphs.log.txt \n'


        output +='\n'
        output += 'echo "Done. $(date) Running on: $(hostname)"'+'\n'
        output += 'wait'+'\n'
        output += 'echo "$(date) AllDone"'+'\n'
        output += 'echo "$(date) AllDone" >&2'+'\n'
        with open(self.vqsrsnps,'w') as outfile: outfile.write(output)

    def submitScripts(self):

        import subprocess
        import sys

        sys.stderr.write('Placing scripts in jobqueue for '+self.collectionId+'.\n')

        command = ['sbatch','--dependency=afterok'+self.jobidDependency,self.gvcf]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        gvcf_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued a gvcfgenotyping script for '+self.collectionId+' with JOBID '+str(gvcf_jobid)+'.\n')

        command = ['sbatch','--dependency=afterok:'+str(gvcf_jobid),self.vqsrsnps]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        vqsrSNP_jobid = sbatch_out.split('\n')[0].split(' ')[3]
        sys.stderr.write('Queued vqsr for SNPs for '+self.collectionId+' with JOBID '+str(vqsrSNP_jobid)+'.\n')

        command = ['sbatch','--dependency=afterok:'+str(vqsrSNP_jobid),self.vqsrindels]
        sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
        sbatch_out, errdata = sbatch.communicate()
        if sbatch.returncode != 0:
            print 'sbatch view Error code', sbatch.returncode, errdata
            print sbatch_out
            sys.exit()
        sys.stderr.write('Queued vqsrindels script for '+self.collectionId+'.\n')

if __name__ == "__main__":
    main()
